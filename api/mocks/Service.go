// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/moemoe89/simple-implementation-jwt-golang/api/api_struct/model"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Generate provides a mock function with given fields:
func (_m *Service) Generate() (string, int, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Parse provides a mock function with given fields: unparsedToken
func (_m *Service) Parse(unparsedToken string) (*model.JWTModel, int, error) {
	ret := _m.Called(unparsedToken)

	var r0 *model.JWTModel
	if rf, ok := ret.Get(0).(func(string) *model.JWTModel); ok {
		r0 = rf(unparsedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.JWTModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(unparsedToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(unparsedToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
